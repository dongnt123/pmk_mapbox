generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model two_factor_confirmation {
  id     String @id
  userId String @unique
  User   user   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model two_factor_token {
  id      String   @id
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model user {
  id                    String                   @id @default(cuid())
  name                  String?
  email                 String?                  @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  user_role                @default(USER)
  isEnableTwoFactor     Boolean                  @default(false)
  account               account[]
  TwoFactorConfirmation two_factor_confirmation?
}

model verification_token {
  id      String   @id
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model business {
  commercial_business_number                     String @id @db.VarChar(100)
  business_name                                  String @db.Text
  branch_name                                    String @db.Text
  commercial_industry_classification_code_big    String @db.Text
  commercial_industry_classification_name        String @db.Text
  commercial_industry_classification_code_middle String @db.Text
  commercial_industry_classification_name_middle String @db.Text
  commercial_industry_classification_code_small  String @db.Text
  commercial_industry_classification_name_small  String @db.Text
  standard_industrial_classification_code        String @db.Text
  standard_industrial_classification_name        String @db.Text
  attempt_code                                   String @db.Text
  city_name                                      String @db.Text
  city_county_code                               String @db.VarChar(20)
  city_county_name                               String @db.Text
  administrative_building_code                   String @db.Text
  administrative_building_name                   String @db.Text
  legal_district_code                            String @db.Text
  legal_district_name                            String @db.Text
  address_code                                   String @db.Text
  land_classification_code                       String @db.Text
  land_classification_name                       String @db.Text
  main_address_number                            String @db.Text
  address_number                                 String @db.Text
  address                                        String @db.Text
  road_name_code                                 String @db.Text
  road_name                                      String @db.Text
  building_address                               String @db.Text
  building_address_detail                        String @db.Text
  building_number                                String @db.Text
  building_name                                  String @db.Text
  street_name_address                            String @db.Text
  old_zip_code                                   String @db.Text
  new_zip_code                                   String @db.Text
  district_information                           String @db.Text
  floor_information                              String @db.Text
  number_information                             String @db.Text
  longitude                                      Float
  latitude                                       Float
}

model cities {
  id       Int         @id @default(autoincrement())
  name     String      @db.Char(100)
  province provinces[]

  @@unique([name])
}

model provinces {
  id        Int     @id @default(autoincrement())
  name      String  @db.Char(100)
  city_name String? @db.Char(100)
  cities    cities? @relation(fields: [city_name], references: [name])

  @@unique([city_name, name])
}

enum user_role {
  ADMIN
  USER
}
